name: Didacto-core dev CI/CD Pipeline

on:
  push:
    branches:
      - develop

jobs:
  docker-build-and-push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # JDK 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
          distribution: 'corretto'

      # Gradle Build
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.6.0
        with:
          arguments: bootJar

      - name: Docker 빌드 도구 설정
        uses: docker/setup-buildx-action@v2.9.1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile2
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/sumda-be:latest

  docker-pull-and-run:
    # 우리가 설정한 runner 의 실행 환경
    runs-on: ubuntu-latest
    needs: [ docker-build-and-push ]
    # 도커 이미지 빌드 및 리포지토리로 push 가 성공할 경우에만 진행
    if: ${{ needs.docker-build-and-push.result == 'success' }}

    steps:
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      - name: Add EC2 host to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.EC2_BACK_BLUE }} >> ~/.ssh/known_hosts
      - name: Verify SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_BACK_BLUE }} echo "SSH connection successful"
      - name: Create .env file on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_BACK_BLUE }} << EOF
            touch .env
            echo 'DB_URL=${{ secrets.DB_URL }}' > /home/${{ secrets.EC2_USER }}/.env
            echo 'DB_USERNAME=${{ secrets.DB_USERNAME }}' >> /home/${{ secrets.EC2_USER }}/.env
            echo 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' >> /home/${{ secrets.EC2_USER }}/.env
            echo 'OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}' >> /home/${{ secrets.EC2_USER }}/.env
            echo 'AIR_PUBLIC_API_KEY=${{ secrets.AIR_PUBLIC_API_KEY }}' >> /home/${{ secrets.EC2_USER }}/.env
            echo 'WEATHER_PUBLIC_API_KEY=${{ secrets.WEATHER_PUBLIC_API_KEY }}' >> /home/${{ secrets.EC2_USER }}/.env
            echo 'SENTRY_DSN=${{ secrets.SENTRY_DSN }}' >> /home/${{ secrets.EC2_USER }}/.env
            echo 'SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}' >> /home/${{ secrets.EC2_USER }}/.env
            echo 'SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_CLIENT_ID=${{ secrets.SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_CLIENT_ID }}' >> /home/${{ secrets.EC2_USER }}/.env
            echo 'JWT_SECRET=${{ secrets.JWT_SECRET }}' >> /home/${{ secrets.EC2_USER }}/.env
          EOF

      # docker hub 의 private 리포지토리에 있는 이미지를 pull
      - name: Docker Hub 리포지토리에서 최신 이미지 가져오기
        run: |
          sudo docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password ${{ secrets.DOCKER_PASSWORD }}
          sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/sumda-be:latest

      # deploy.sh 파일 서버로 전달하기
      - name: Send deploy.sh
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.EC2_BACK_BLUE }}
          key: ${{ secrets.EC2_KEY }}
          port: 22
          source: "./deploy.sh"
          target: "/home/ubuntu/"

      # deploy.sh 의 실행 권한 주기 및 실행
      - name: blue green 배포
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.EC2_BACK_BLUE }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            sudo chmod +x deploy.sh
            sudo ./deploy.sh
            docker image prune -f
