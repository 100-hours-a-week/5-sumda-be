name: CI/CD with Docker

on:
  push:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

      - name: List build directory
        run: ls -al build/libs

      - name: Build Docker image
        run: docker build --build-arg SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }} -t backend:latest .

      - name: Save Docker image to archive
        run: docker save backend:latest -o backend.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-image
          path: backend.tar

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v2
        with:
          name: docker-image

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Add EC2 host to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.EC2_DEV_HOST }} >> ~/.ssh/known_hosts

      - name: Verify SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_DEV_HOST }} echo "SSH connection successful"

      - name: Create .env file and copy Docker image to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa backend.tar ${{ secrets.EC2_USER }}@${{ secrets.EC2_DEV_HOST }}:/home/${{ secrets.EC2_USER }}/backend.tar
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_DEV_HOST }} << 'EOF'
            cat <<EOT > /home/${{ secrets.EC2_USER }}/.env
            DB_URL=${{ secrets.DB_URL }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            AIR_PUBLIC_API_KEY=${{ secrets.AIR_PUBLIC_API_KEY }}
            WEATHER_PUBLIC_API_KEY=${{ secrets.WEATHER_PUBLIC_API_KEY }}
            SENTRY_DSN=${{ secrets.SENTRY_DSN }}
            EOT
          EOF

      - name: Load Docker image and run on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_DEV_HOST }} << 'EOF'
            docker load -i /home/${{ secrets.EC2_USER }}/backend.tar
            docker ps
            docker stop sumda-be || true
            docker rm sumda-be || true
            docker run -d -p 8080:8080 --name sumda-be --env-file /home/${{ secrets.EC2_USER }}/.env backend:latest
          EOF
