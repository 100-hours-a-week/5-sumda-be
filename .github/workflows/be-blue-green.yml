name: CI/CD with Docker

on:
  push:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

      - name: List build directory
        run: ls -al build/libs

      - name: Build Docker image (Blue or Green)
        id: build
        run: |
          CURRENT_COLOR=$(ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_DEV_HOST }} "docker ps --filter 'name=be-blue' --filter 'status=running' -q")
          if [ -z "$CURRENT_COLOR" ]; then
            echo "Building blue..."
            docker build --build-arg SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }} -t backend-blue:latest .
            echo "blue" > color.txt
          else
            echo "Building green..."
            docker build --build-arg SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }} -t backend-green:latest .
            echo "green" > color.txt
          fi

      - name: Save Docker image to archive
        run: |
          COLOR=$(cat color.txt)
          docker save backend-${COLOR}:latest -o backend-${COLOR}.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-image
          path: backend-*.tar

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v2
        with:
          name: docker-image

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Add EC2 host to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.EC2_DEV_HOST }} >> ~/.ssh/known_hosts

      - name: Verify SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_DEV_HOST }} echo "SSH connection successful"

      - name: Deploy to EC2 (Blue or Green)
        run: |
          COLOR=$(cat color.txt)
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_DEV_HOST }} << 'EOF'
            docker load -i /home/${{ secrets.EC2_USER }}/backend-${COLOR}.tar

            if [ "${COLOR}" == "blue" ]; then
              docker stop be-green || true
              docker rm be-green || true
              docker run -d -p 8080:8080 --name be-blue --env-file /home/${{ secrets.EC2_USER }}/.env backend-blue:latest
            else
              docker stop be-blue || true
              docker rm be-blue || true
              docker run -d -p 8081:8081 --name be-green --env-file /home/${{ secrets.EC2_USER }}/.env backend-green:latest
            fi
          EOF